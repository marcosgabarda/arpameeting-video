<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
               xmlns:s="library://ns.adobe.com/flex/spark" 
               xmlns:mx="library://ns.adobe.com/flex/mx" 
               applicationComplete="main()"
               minWidth="955" minHeight="600">
    <fx:Script>
        <![CDATA[
            import com.arpameeting.utils.AdobeDeveloperData;
            import com.arpameeting.utils.Log;
            
            import mx.core.FlexGlobals;
            import mx.controls.Alert;
            
            import flash.external.ExternalInterface;
            
            [Bindable] private var _connected:Boolean = false;
            [Bindable] private var _publishing:Boolean = false;
            [Bindable] private var _group_name:String = "com.arpameeting.";
            [Bindable] private var _stream_name:String;
            [Bindable] private var _user_tag:String;
            
            private var _groupSpecifier:GroupSpecifier;
            private var _netConnection:NetConnection;
            private var _outgoingStream:NetStream;
            private var _netGroup:NetGroup;
            
            private var _camera:Camera = null;
            private var _quality:Number = 85;
            
            private function setupCamera():void
            {
                _camera = Camera.getCamera();
                _camera.setMode(640, 480, 15);
                _camera.setQuality(0, _quality);
                _camera.setLoopback(true);
            }
            
            private function publish():void
            {
                _outgoingStream = new NetStream(_netConnection, 
                    _groupSpecifier.groupspecWithAuthorizations());
                _outgoingStream.addEventListener(NetStatusEvent.NET_STATUS, 
                    onNetStatus);
                
                setupCamera();
                
                _outgoingStream.attachCamera(_camera);
                _outgoingStream.publish(_stream_name);
                
                var video:Video = new Video(outgoingVideoDisplay.width, 
                    outgoingVideoDisplay.height);
                video.attachCamera(_camera);
                video.smoothing = true;
                video.scaleX = -1;
                video.x = video.x + video.width;
                
                outgoingVideoDisplay.addChild(video);
                
                _publishing = true;
            }
            
            private function play(stream:String):void
            {
                if (ExternalInterface.available)
                {
                    var wrapperFunction:String = "AMVideo.newIncomingStream";
                    Log.d("Calling to " + wrapperFunction + "('" + stream + "')");
                    ExternalInterface.call(wrapperFunction, stream);
                }
                else
                {
                    Log.d("ExternalInterface not available");
                    Alert.show("ExternalInterface not available");
                }
            }
            
            public function stop():void 
            {
                _outgoingStream.close();
                outgoingVideoDisplay.removeChildAt(1);
                _publishing = false;
            }
            
            public function stoped(stream:String):void
            {
                // TODO Use External interface
            }
            
            private function onConnect():void
            {
                _netGroup = new NetGroup(_netConnection, 
                    _groupSpecifier.groupspecWithAuthorizations());
                _netGroup.addEventListener(NetStatusEvent.NET_STATUS, 
                    onNetStatus);
            }
            
            /**
             * --- Net Handler ---
             */
            private function onNetStatus(event:NetStatusEvent):void
            {
                Log.d(event.info.code);
                switch (event.info.code)
                {
                    case "NetConnection.Connect.Success":
                        onConnect();
                        break;
                    case "NetGroup.Connect.Success":
                        break;
                    case "NetGroup.Neighbor.Connect":
                        _connected = true;
                        break;
                    case "NetGroup.MulticastStream.PublishNotify":
                        Log.d(event.info.name + " stream detected!");
                        play(event.info.name);
                        break;
                    case "NetGroup.MulticastStream.UnpublishNotify":
                        Log.d(event.info.name + " stream stoped!");
                        stoped(event.info.name);
                        break;
                    case "NetGroup.Posting.Notify":
                        break;
                    default:
                        break;
                }
            }
            
            /**
             * --- MAIN FUNCTION ---
             */
            private function main():void
            {
                /**
                 * Running if "_group_name" is setted.
                 */
                if (FlexGlobals.topLevelApplication.parameters.group == null || 
                    FlexGlobals.topLevelApplication.parameters.stream == null)
                {
                    return;
                }

                /**
                 * Get varaibles from flashVars.
                 */
                _group_name = _group_name + 
                    FlexGlobals.topLevelApplication.parameters.group;
                _stream_name = 
                    FlexGlobals.topLevelApplication.parameters.stream;
                _user_tag = "user" + int(Math.random() * 65536);
                Log.tag = _user_tag;

                /**
                 * GroupSpecifier.
                 */
                _groupSpecifier = new GroupSpecifier(_group_name);
                _groupSpecifier.multicastEnabled = true;
                _groupSpecifier.serverChannelEnabled = true;
                _groupSpecifier.postingEnabled = true;
                //_groupSpecifier.routingEnabled = true;
                //_groupSpecifier.objectReplicationEnabled = true;
                //_groupSpecifier.ipMulticastMemberUpdatesEnabled = true;
                //_groupSpecifier.peerToPeerDisabled = true;

                /**
                 * Connecting.
                 */
                _netConnection = new NetConnection();
                _netConnection.addEventListener(NetStatusEvent.NET_STATUS, 
                    onNetStatus);
                _netConnection.connect(AdobeDeveloperData.SERVER + "/" + 
                    AdobeDeveloperData.DEVKEY);

            }
        ]]>
    </fx:Script>
    <fx:Declarations>
        <!-- Place non-visual elements (e.g., services, value objects) here -->
    </fx:Declarations>
    <s:HGroup>
        <s:VGroup verticalAlign="middle">
            <s:Button label="Publish" click="publish()" enabled="{_connected}" />
            <s:Button label="Stop" click="stop()" enabled="{_publishing}" />
        </s:VGroup>
        <s:VideoDisplay id="outgoingVideoDisplay" width="160" height="120" />
    </s:HGroup>
</s:Application>
