<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
               xmlns:s="library://ns.adobe.com/flex/spark" 
               xmlns:mx="library://ns.adobe.com/flex/mx" 
               minWidth="955" minHeight="600"
               applicationComplete="main()">
    <fx:Script>
        <![CDATA[
            import flash.net.GroupSpecifier;
            import flash.net.NetConnection;
            
            import spark.components.VideoDisplay;
            
            private const DEVKEY:String = "e9aada2bb0f442b4d6465849-7770b67ecf6c";
            private const SERVER:String = "rtmfp://p2p.rtmfp.net"
            
            // TODO GROUP_NAME_STRING as a parameter.
            private var GROUP_NAME_STRING:String = "com.arpamet.com.videop2p_testing";
            private var _groupSpecifier:GroupSpecifier;
            
            private var _netConnection:NetConnection;
            private var _outgoingStream:NetStream;
            private var _netGroup:NetGroup;
            
            [Bindable] private var user:String;
            
            private var _incomingStreams:Array = new Array();
            
            //private var _videoDisplays:Dictionary = new Dictionary();
            
            [Bindalbe] private var connected:Boolean = false;
            
            [Bindable] private var _quality:Number = 75;
            
            [Bindable] private var camera:Camera = Camera.getCamera();
                
            public function log(msg:String):void
            {
                trace("[" + user + "] " + msg);
            }
            
            public function main():void
            {
                /**
                 * Generate a random ID.
                 */
                user = "user" + int(Math.random() * 65536);
                log("applicationComplete");
                
                /**
                 * NetConnection.
                 */
                _netConnection = new NetConnection();
                _netConnection.addEventListener(NetStatusEvent.NET_STATUS, 
                    onNetStatus);
                _netConnection.connect(SERVER + "/" + DEVKEY);
            }
            
            public function onNetStatus(event:NetStatusEvent):void
            {
                log(event.info.code);
                switch (event.info.code)
                {
                    case "NetConnection.Connect.Success":
                        onConnect();
                        break;
                    case "NetGroup.Connect.Success":
                        break;
                    case "NetGroup.Neighbor.Connect":
                        sayHello();
                        break;
                    case "NetGroup.MulticastStream.PublishNotify":
                        log(event.info.name + " stream detected!");
                        play(event.info.name);
                        break;
                    case "NetGroup.MulticastStream.UnpublishNotify":
                        log(event.info.name + " stream stoped!");
                        stoped(event.info.name);
                        break;
                    case "NetGroup.Posting.Notify":
                        onPosting(event.info.message);
                        break;
                    default:
                        break;
                }
            }
            
            public function onConnect():void
            {
                /**
                 * GroupSpecifier.
                 */
                _groupSpecifier = new GroupSpecifier(GROUP_NAME_STRING);
                _groupSpecifier.multicastEnabled = true;
                //_groupSpecifier.objectReplicationEnabled = true;
                _groupSpecifier.postingEnabled = true;
                //_groupSpecifier.routingEnabled = true;
                _groupSpecifier.serverChannelEnabled = true;
                //_groupSpecifier.ipMulticastMemberUpdatesEnabled = true;
                //_groupSpecifier.peerToPeerDisabled = true;
                
                _netGroup = new NetGroup(_netConnection, 
                    _groupSpecifier.groupspecWithAuthorizations());
                _netGroup.addEventListener(NetStatusEvent.NET_STATUS, 
                    onNetStatus);
                
                
            }
            
            public function sayHello():void
            {
                // Send name...
                var message:Object = new Object();
                message.log = user + " is in da house!";
                //log(_netGroup.post(message));
                connected = true;
            }
            public function onPosting(message:Object):void
            {
                if (message.hasOwnProperty("log"))
                {
                    log(message.log);
                }
            }
            
            public function publish():void
            {
                _outgoingStream = new NetStream(_netConnection, 
                    _groupSpecifier.groupspecWithAuthorizations());
                _outgoingStream.addEventListener(NetStatusEvent.NET_STATUS, 
                    onNetStatus);
                
                camera.setMode(640, 480, 15);
                camera.setQuality(0, _quality);
                
                _outgoingStream.attachCamera(camera);
                _outgoingStream.publish(user);
            }
            public function play(stream:String):void
            {
                var video:Video = new Video();
                var videoDisplay:VideoDisplay = new VideoDisplay();
                
                var incomingStream:NetStream = new NetStream(_netConnection, 
                    _groupSpecifier.groupspecWithAuthorizations());
                _incomingStreams.push(incomingStream);
                incomingStream.play(stream);
                
                video.attachNetStream(incomingStream);
                video.smoothing = true;
                
                videoDisplay.width = video.width;
                videoDisplay.height = video.height;
                
                videoDisplay.addChild(video);
                
                containter.addElement(videoDisplay);
                
                //_videoDisplays[stream] = videoDisplay;
            }
            public function stop():void 
            {
                _outgoingStream.close();
            }
            public function stoped(stream:String):void
            {
                //var index:int = 
                //    containter.getElementIndex(_videoDisplays[stream]);
                log ("Remove container");
            }
        ]]>
    </fx:Script>
    <fx:Declarations>
        <!-- Place non-visual elements (e.g., services, value objects) here -->
    </fx:Declarations>
    <s:VGroup >
        <s:HGroup>
            <mx:Text text="{user}" />
            <s:NumericStepper id="quality"
                              value="{_quality}"
                              stepSize="1"
                              minimum="0"
                              maximum="100"
                              change="camera.setQuality(0,quality.value)" />
            <s:Button label="Publish" click="publish()"/>
            <s:Button label="Stop" click="stop()"/>
        </s:HGroup>
        <s:HGroup id="containter" />
    </s:VGroup>
</s:Application>
